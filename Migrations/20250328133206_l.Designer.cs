// <auto-generated />
using System;
using IMDB.MyContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMDB.Migrations
{
    [DbContext(typeof(Applicationcontext))]
    [Migration("20250328133206_l")]
    partial class l
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMDB.Models.Actor", b =>
                {
                    b.Property<int>("Actor_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Actor_ID"));

                    b.Property<string>("BIO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Actor_ID");

                    b.ToTable("actors");

                    b.HasData(
                        new
                        {
                            Actor_ID = 1,
                            BIO = "An award-winning American actor known for Inception and Titanic.",
                            Name = "Leonardo DiCaprio",
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Leonardo_DiCaprio_2014.jpg/800px-Leonardo_DiCaprio_2014.jpg",
                            nationality = "American"
                        },
                        new
                        {
                            Actor_ID = 2,
                            BIO = "Famous for his role as Batman in The Dark Knight Trilogy.",
                            Name = "Christian Bale",
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Christian_Bale_2019.jpg/800px-Christian_Bale_2019.jpg",
                            nationality = "British"
                        },
                        new
                        {
                            Actor_ID = 3,
                            BIO = "Best known for Breaking Bad.",
                            Name = "Bryan Cranston",
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Bryan_Cranston_by_Gage_Skidmore_2.jpg/800px-Bryan_Cranston_by_Gage_Skidmore_2.jpg",
                            nationality = "American"
                        },
                        new
                        {
                            Actor_ID = 4,
                            BIO = "Famous for playing Daenerys Targaryen in Game of Thrones.",
                            Name = "Emilia Clarke",
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Emilia_Clarke_by_Gage_Skidmore.jpg/800px-Emilia_Clarke_by_Gage_Skidmore.jpg",
                            nationality = "British"
                        },
                        new
                        {
                            Actor_ID = 5,
                            BIO = "Japanese voice actor known for voicing Eren Yeager in Attack on Titan.",
                            Name = "Yuki Kaji",
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Yuki_Kaji_Anime_Expo_2018.jpg/800px-Yuki_Kaji_Anime_Expo_2018.jpg",
                            nationality = "Japanese"
                        },
                        new
                        {
                            Actor_ID = 6,
                            BIO = "Japanese voice actress known for Asuna in Sword Art Online.",
                            Name = "Haruka Tomatsu",
                            image = "https://upload.wikimedia.org/wikipedia/commons/3/3a/Haruka_Tomatsu_Anime_Expo_2018.jpg",
                            nationality = "Japanese"
                        });
                });

            modelBuilder.Entity("IMDB.Models.Director", b =>
                {
                    b.Property<int>("Director_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Director_ID"));

                    b.Property<string>("BIO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("birthdate")
                        .HasColumnType("date");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Director_ID");

                    b.ToTable("directors");

                    b.HasData(
                        new
                        {
                            Director_ID = 1,
                            BIO = "Renowned for his complex storytelling and innovative cinematography.",
                            Name = "Christopher Nolan",
                            birthdate = new DateOnly(1970, 7, 30),
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Christopher_Nolan_Cannes_2018.jpg/800px-Christopher_Nolan_Cannes_2018.jpg",
                            nationality = "British-American"
                        },
                        new
                        {
                            Director_ID = 2,
                            BIO = "Known for his nonlinear storytelling and stylized violence.",
                            Name = "Quentin Tarantino",
                            birthdate = new DateOnly(1963, 3, 27),
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/03/Quentin_Tarantino_by_Gage_Skidmore.jpg/800px-Quentin_Tarantino_by_Gage_Skidmore.jpg",
                            nationality = "American"
                        },
                        new
                        {
                            Director_ID = 3,
                            BIO = "Legendary Japanese animator and co-founder of Studio Ghibli.",
                            Name = "Hayao Miyazaki",
                            birthdate = new DateOnly(1941, 1, 5),
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Hayao_Miyazaki_cropped_1_Hayao_Miyazaki_201211.jpg/800px-Hayao_Miyazaki_cropped_1_Hayao_Miyazaki_201211.jpg",
                            nationality = "Japanese"
                        },
                        new
                        {
                            Director_ID = 4,
                            BIO = "Famous for Cowboy Bebop and Samurai Champloo.",
                            Name = "Shinichiro Watanabe",
                            birthdate = new DateOnly(1965, 5, 24),
                            image = "https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Shinichiro_Watanabe_at_Anime_Expo_2016.jpg/800px-Shinichiro_Watanabe_at_Anime_Expo_2016.jpg",
                            nationality = "Japanese"
                        });
                });

            modelBuilder.Entity("IMDB.Models.Genre", b =>
                {
                    b.Property<int>("Genre_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Genre_ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Genre_ID");

                    b.ToTable("genres");

                    b.HasData(
                        new
                        {
                            Genre_ID = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Genre_ID = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Genre_ID = 3,
                            Name = "Drama"
                        },
                        new
                        {
                            Genre_ID = 4,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Genre_ID = 5,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Genre_ID = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Genre_ID = 7,
                            Name = "Mystery"
                        },
                        new
                        {
                            Genre_ID = 8,
                            Name = "Crime"
                        },
                        new
                        {
                            Genre_ID = 9,
                            Name = "Romance"
                        },
                        new
                        {
                            Genre_ID = 10,
                            Name = "Animation"
                        });
                });

            modelBuilder.Entity("IMDB.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("Episodes")
                        .HasColumnType("int");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int?>("Seasons")
                        .HasColumnType("int");

                    b.Property<string>("Studio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("MediaId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("medias");

                    b.HasData(
                        new
                        {
                            MediaId = 1,
                            Description = "A thief with the ability to enter people's dreams takes on the heist of his life.",
                            DirectorId = 1,
                            Duration = 148,
                            MediaTypeId = 1,
                            Poster = "https://m.media-amazon.com/images/I/51NBpSY0NHL._AC_.jpg",
                            Rating = 9f,
                            ReleaseDate = new DateOnly(2010, 7, 16),
                            Title = "Inception",
                            TrailerURL = "https://www.youtube.com/watch?v=YoHD9XEInc0",
                            Year = 2010
                        },
                        new
                        {
                            MediaId = 2,
                            Description = "Batman faces off against his greatest enemy, the Joker, in a battle for Gotham's soul.",
                            DirectorId = 1,
                            Duration = 152,
                            MediaTypeId = 1,
                            Poster = "https://m.media-amazon.com/images/I/51EbJvl8gJL._AC_.jpg",
                            Rating = 10f,
                            ReleaseDate = new DateOnly(2008, 7, 18),
                            Title = "The Dark Knight",
                            TrailerURL = "https://www.youtube.com/watch?v=EXeTwQWrcwY",
                            Year = 2008
                        },
                        new
                        {
                            MediaId = 3,
                            Description = "In a world where titans eat humans, a group of soldiers fight for survival.",
                            Episodes = 75,
                            MediaTypeId = 2,
                            Poster = "https://m.media-amazon.com/images/I/81ETPpG5dZL._AC_SL1500_.jpg",
                            Rating = 10f,
                            ReleaseDate = new DateOnly(2013, 4, 7),
                            Seasons = 4,
                            Studio = "Wit Studio",
                            Title = "Attack on Titan",
                            TrailerURL = "https://www.youtube.com/watch?v=MGRm4IzK1SQ",
                            Year = 2013
                        },
                        new
                        {
                            MediaId = 4,
                            Description = "Two strangers find themselves mysteriously connected despite never having met.",
                            Episodes = 1,
                            MediaTypeId = 2,
                            Poster = "https://m.media-amazon.com/images/I/91zno84lrzL._AC_SY679_.jpg",
                            Rating = 9f,
                            ReleaseDate = new DateOnly(2016, 8, 26),
                            Studio = "CoMix Wave Films",
                            Title = "Naruto",
                            TrailerURL = "https://www.youtube.com/watch?v=xU47nhruN-Q",
                            Year = 2016
                        },
                        new
                        {
                            MediaId = 5,
                            Description = "A high school chemistry teacher turned drug kingpin struggles to balance his new life.",
                            MediaTypeId = 3,
                            Poster = "https://m.media-amazon.com/images/I/81eNnLuUuPL._AC_SL1500_.jpg",
                            Rating = 10f,
                            ReleaseDate = new DateOnly(2008, 1, 20),
                            Seasons = 5,
                            Title = "Breaking Bad",
                            TrailerURL = "https://www.youtube.com/watch?v=HhesaQXLuRY",
                            Year = 2008
                        },
                        new
                        {
                            MediaId = 6,
                            Description = "Noble families vie for control of the Iron Throne in the land of Westeros.",
                            MediaTypeId = 3,
                            Poster = "https://m.media-amazon.com/images/I/91YwZl3T52L._AC_SL1500_.jpg",
                            Rating = 9f,
                            ReleaseDate = new DateOnly(2011, 4, 17),
                            Seasons = 8,
                            Title = "Game of Thrones",
                            TrailerURL = "https://www.youtube.com/watch?v=KPLWWIOCOOQ",
                            Year = 2011
                        });
                });

            modelBuilder.Entity("IMDB.Models.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaTypeId");

                    b.ToTable("mediaTypes");

                    b.HasData(
                        new
                        {
                            MediaTypeId = 1,
                            Name = "Movie"
                        },
                        new
                        {
                            MediaTypeId = 2,
                            Name = "Anime"
                        },
                        new
                        {
                            MediaTypeId = 3,
                            Name = "Series"
                        });
                });

            modelBuilder.Entity("IMDB.Models.MediaWatchlist", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("WatchlistId")
                        .HasColumnType("int");

                    b.HasKey("MediaId", "WatchlistId");

                    b.HasIndex("WatchlistId");

                    b.ToTable("movieWatchlists");
                });

            modelBuilder.Entity("IMDB.Models.Media_Actors", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("MediaId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("Movie_Actors");

                    b.HasData(
                        new
                        {
                            MediaId = 1,
                            ActorId = 1
                        },
                        new
                        {
                            MediaId = 2,
                            ActorId = 2
                        },
                        new
                        {
                            MediaId = 3,
                            ActorId = 5
                        },
                        new
                        {
                            MediaId = 4,
                            ActorId = 6
                        },
                        new
                        {
                            MediaId = 5,
                            ActorId = 3
                        },
                        new
                        {
                            MediaId = 6,
                            ActorId = 4
                        });
                });

            modelBuilder.Entity("IMDB.Models.Media_Genre", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MediaId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("movie_Genres");

                    b.HasData(
                        new
                        {
                            MediaId = 1,
                            GenreId = 5
                        },
                        new
                        {
                            MediaId = 2,
                            GenreId = 6
                        },
                        new
                        {
                            MediaId = 3,
                            GenreId = 1
                        },
                        new
                        {
                            MediaId = 4,
                            GenreId = 9
                        },
                        new
                        {
                            MediaId = 5,
                            GenreId = 8
                        },
                        new
                        {
                            MediaId = 6,
                            GenreId = 4
                        });
                });

            modelBuilder.Entity("IMDB.Models.Review", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("IMDB.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("IMDB.Models.Watchlist", b =>
                {
                    b.Property<int>("WatchlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchlistId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WatchlistId");

                    b.HasIndex("UserId");

                    b.ToTable("watchlists");
                });

            modelBuilder.Entity("IMDB.Models.Media", b =>
                {
                    b.HasOne("IMDB.Models.Director", "Director")
                        .WithMany("medias")
                        .HasForeignKey("DirectorId");

                    b.HasOne("IMDB.Models.MediaType", "MediaType")
                        .WithMany("Media")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("IMDB.Models.MediaWatchlist", b =>
                {
                    b.HasOne("IMDB.Models.Media", "Media")
                        .WithMany("MediaWatchlists")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDB.Models.Watchlist", "Watchlist")
                        .WithMany("mediaWatchlists")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("IMDB.Models.Media_Actors", b =>
                {
                    b.HasOne("IMDB.Models.Actor", "Actor")
                        .WithMany("media_Actors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDB.Models.Media", "Media")
                        .WithMany("MediaActors")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("IMDB.Models.Media_Genre", b =>
                {
                    b.HasOne("IMDB.Models.Genre", "Genre")
                        .WithMany("media_Genres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDB.Models.Media", "Media")
                        .WithMany("MediaGenres")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("IMDB.Models.Review", b =>
                {
                    b.HasOne("IMDB.Models.Media", "media")
                        .WithMany("Reviews")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDB.Models.User", "User")
                        .WithMany("reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("media");
                });

            modelBuilder.Entity("IMDB.Models.Watchlist", b =>
                {
                    b.HasOne("IMDB.Models.User", "User")
                        .WithMany("watchlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMDB.Models.Actor", b =>
                {
                    b.Navigation("media_Actors");
                });

            modelBuilder.Entity("IMDB.Models.Director", b =>
                {
                    b.Navigation("medias");
                });

            modelBuilder.Entity("IMDB.Models.Genre", b =>
                {
                    b.Navigation("media_Genres");
                });

            modelBuilder.Entity("IMDB.Models.Media", b =>
                {
                    b.Navigation("MediaActors");

                    b.Navigation("MediaGenres");

                    b.Navigation("MediaWatchlists");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("IMDB.Models.MediaType", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("IMDB.Models.User", b =>
                {
                    b.Navigation("reviews");

                    b.Navigation("watchlists");
                });

            modelBuilder.Entity("IMDB.Models.Watchlist", b =>
                {
                    b.Navigation("mediaWatchlists");
                });
#pragma warning restore 612, 618
        }
    }
}
